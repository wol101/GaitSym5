Notes on PhysX compilation

Needs vswhere.exe copied from "C:\Program Files (x86)\Microsoft Visual Studio\Installer" to "D:\"
[vswhere is quite useful for finding out what version of VS is installed]

Needs a reasonably up to date version of CUDA and this needs to be set to the right CUDA_PATH (so a reboot probably required)

Run generate_projects.bat and select the required options from:

(0) vc15win64 <--- VC15 Win64 PhysX general settings
(1) vc16win64-cpu-only <--- VC16 Win64 PhysX general settings (cpu only)
(2) vc16win64 <--- VC16 Win64 PhysX general settings
(3) vc17win64-cpu-only <--- VC17 Win64 PhysX general settings (cpu only)
(4) vc17win64 <--- VC17 Win64 PhysX general settings

However there are important options that might need to be changed. Look at the presets in buildtools\presets\public. I had to change various cmake switches:

    <cmakeSwitch name="PX_BUILDSNIPPETS" value="False" comment="Generate the snippets" />
    <cmakeSwitch name="PX_BUILDPVDRUNTIME" value="False" comment="Generate the OmniPVD project" />
    <cmakeSwitch name="PX_GENERATE_STATIC_LIBRARIES" value="False" comment="Generate static libraries" />
    <cmakeSwitch name="NV_USE_STATIC_WINCRT" value="False" comment="Use the statically linked windows CRT" />
    <cmakeSwitch name="NV_USE_DEBUG_WINCRT" value="True" comment="Use the debug version of the CRT" />
    <cmakeSwitch name="PX_FLOAT_POINT_PRECISE_MATH" value="True" comment="Float point precise math" />


For Visual Studio 2022 this is 3 and 4.

These create the folders:

physx\compiler\vc17win64
physx\compiler\vc17win64-cpu-only

cd to the required folder and compile the required configuration with:

msbuild PhysXSDK.sln /p:Configuration=debug
msbuild PhysXSDK.sln /p:Configuration=checked
msbuild PhysXSDK.sln /p:Configuration=profile
msbuild PhysXSDK.sln /p:Configuration=release

The output files are put in "physx\bin\win.x86_64.vc143.mt" 


Notes on MuJoCo compilation

mkdir build
cd build

cmake ..

Note that cmake downloads quite a few dependencies

msbuild mujoco.sln /p:Configuration=Debug
msbuild mujoco.sln /p:Configuration=MinSizeRel
msbuild mujoco.sln /p:Configuration=Release
msbuild mujoco.sln /p:Configuration=RelWithDebInfo

These create folders in bin and lib.

devenv may be better than msbuild

devenv mujoco.sln /Clean "Release|x64"
devenv mujoco.sln /Build "Release|x64"


Notes on threecpp

This needs to be build because the build process generates quite a lot of source code that is needed. This ends up in build\generated so I have copied that out to allow it to be included on gitbub. If using the librabry then all the various cmake flavours will be needed (Debug, MinSizeRel, Release, RelWithDebInfo)

Windows

cmake . -A x64 -B build -DCMAKE_BUILD_TYPE="Release"
cmake --build build --config "Release"

Unix

cmake . -B build -DCMAKE_BUILD_TYPE="Release"
cmake --build build

